{"version":3,"sources":["BottomSheetBackdrop.tsx"],"names":["BottomSheetBackdropComponent","animatedIndex","opacity","DEFAULT_OPACITY","appearsOnIndex","DEFAULT_APPEARS_ON_INDEX","disappearsOnIndex","DEFAULT_DISAPPEARS_ON_INDEX","enableTouchThrough","DEFAULT_ENABLE_TOUCH_THROUGH","pressBehavior","closeOnPress","style","handleOnPress","syntheticPressBehavior","containerRef","pointerEvents","handleContainerTouchability","shouldDisableTouchability","current","setNativeProps","gestureHandler","onFinish","containerAnimatedStyle","value","Extrapolate","CLAMP","flex","containerStyle","styles","container","previous","BottomSheetBackdrop","displayName"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useMemo, useRef } from 'react';\nimport Animated, {\n  interpolate,\n  Extrapolate,\n  useAnimatedStyle,\n  useAnimatedReaction,\n  useAnimatedGestureHandler,\n  runOnJS,\n} from 'react-native-reanimated';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport {\n  DEFAULT_OPACITY,\n  DEFAULT_APPEARS_ON_INDEX,\n  DEFAULT_DISAPPEARS_ON_INDEX,\n  DEFAULT_ENABLE_TOUCH_THROUGH,\n} from './constants';\nimport { usePressBehavior } from './usePressBehavior';\nimport { styles } from './styles';\nimport type { BottomSheetDefaultBackdropProps } from './types';\n\nconst BottomSheetBackdropComponent = ({\n  animatedIndex,\n  opacity = DEFAULT_OPACITY,\n  appearsOnIndex = DEFAULT_APPEARS_ON_INDEX,\n  disappearsOnIndex = DEFAULT_DISAPPEARS_ON_INDEX,\n  enableTouchThrough = DEFAULT_ENABLE_TOUCH_THROUGH,\n  pressBehavior,\n  closeOnPress,\n  style,\n}: BottomSheetDefaultBackdropProps) => {\n  //#region hooks\n  const { handleOnPress, syntheticPressBehavior } = usePressBehavior({\n    pressBehavior,\n    closeOnPress,\n    disappearsOnIndex,\n  });\n  //#endregion\n\n  //#region variables\n  const containerRef = useRef<Animated.View>(null);\n  const pointerEvents = useMemo(() => (enableTouchThrough ? 'none' : 'auto'), [\n    enableTouchThrough,\n  ]);\n  //#endregion\n\n  //#region callbacks\n  const handleContainerTouchability = useCallback(\n    (shouldDisableTouchability: boolean) => {\n      if (!containerRef.current) {\n        return;\n      }\n      // @ts-ignore\n      containerRef.current.setNativeProps({\n        pointerEvents: shouldDisableTouchability ? 'none' : 'auto',\n      });\n    },\n    []\n  );\n  //#endregion\n\n  //#region tap gesture\n  const gestureHandler = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>(\n    {\n      onFinish: () => {\n        runOnJS(handleOnPress)();\n      },\n    },\n    [handleOnPress]\n  );\n  //#endregion\n\n  //#region styles\n  const containerAnimatedStyle = useAnimatedStyle(() => ({\n    opacity: interpolate(\n      animatedIndex.value,\n      [-1, disappearsOnIndex, appearsOnIndex],\n      [0, 0, opacity],\n      Extrapolate.CLAMP\n    ),\n    flex: 1,\n  }));\n  const containerStyle = useMemo(\n    () => [styles.container, style, containerAnimatedStyle],\n    [style, containerAnimatedStyle]\n  );\n  //#endregion\n\n  //#region effects\n  useAnimatedReaction(\n    () => animatedIndex.value <= disappearsOnIndex,\n    (shouldDisableTouchability, previous) => {\n      if (shouldDisableTouchability === previous) {\n        return;\n      }\n      runOnJS(handleContainerTouchability)(shouldDisableTouchability);\n    },\n    [disappearsOnIndex]\n  );\n  //#endregion\n\n  return syntheticPressBehavior !== 'none' ? (\n    <TapGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View\n        ref={containerRef}\n        style={containerStyle}\n        accessible={true}\n        accessibilityRole=\"button\"\n        accessibilityLabel=\"Bottom Sheet backdrop\"\n        accessibilityHint={`Tap to ${\n          typeof syntheticPressBehavior === 'string'\n            ? syntheticPressBehavior\n            : 'move'\n        } the Bottom Sheet`}\n      />\n    </TapGestureHandler>\n  ) : (\n    <Animated.View\n      ref={containerRef}\n      pointerEvents={pointerEvents}\n      style={containerStyle}\n    />\n  );\n};\n\nconst BottomSheetBackdrop = memo(BottomSheetBackdropComponent);\nBottomSheetBackdrop.displayName = 'BottomSheetBackdrop';\n\nexport default BottomSheetBackdrop;\n"]}