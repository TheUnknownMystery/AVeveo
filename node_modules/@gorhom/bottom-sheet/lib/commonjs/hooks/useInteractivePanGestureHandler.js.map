{"version":3,"sources":["useInteractivePanGestureHandler.ts"],"names":["useInteractivePanGestureHandler","type","enableOverDrag","overDragResistanceFactor","keyboardState","keyboardBehavior","keyboardHeight","isExtendedByKeyboard","animatedPosition","animatedSnapPoints","scrollableContentOffsetY","animateToPoint","gestureState","State","UNDETERMINED","gestureTranslationY","gestureVelocityY","gestureHandler","onStart","state","translationY","velocityY","context","currentPosition","value","KEYBOARD_STATE","SHOWN","KEYBOARD_BEHAVIOR","interactive","fullScreen","onActive","absoluteY","position","maxSnapPoint","length","negativeScrollableContentOffset","clampedPosition","KEYBOARD_DISMISS_THRESHOLD","Platform","OS","WINDOW_HEIGHT","Keyboard","dismiss","GESTURE","HANDLE","resistedPosition","Math","sqrt","CONTENT","onEnd","destinationPoint","onCancel","onFail","onFinish"],"mappings":"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","sourcesContent":["import { Keyboard, Platform } from 'react-native';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useSharedValue,\n  cancelAnimation,\n  runOnJS,\n} from 'react-native-reanimated';\nimport {\n  State,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { clamp, snapPoint } from 'react-native-redash';\nimport {\n  GESTURE,\n  KEYBOARD_BEHAVIOR,\n  KEYBOARD_DISMISS_THRESHOLD,\n  KEYBOARD_STATE,\n  WINDOW_HEIGHT,\n} from '../constants';\n\ninterface useInteractivePanGestureHandlerConfigs {\n  type: GESTURE;\n  enableOverDrag: boolean;\n  overDragResistanceFactor: number;\n  isExtendedByKeyboard: Animated.SharedValue<boolean>;\n  keyboardState: Animated.SharedValue<KEYBOARD_STATE>;\n  keyboardHeight: Animated.SharedValue<number>;\n  keyboardBehavior: keyof typeof KEYBOARD_BEHAVIOR;\n  animatedSnapPoints: Animated.SharedValue<number[]>;\n  animatedPosition: Animated.SharedValue<number>;\n  scrollableContentOffsetY?: Animated.SharedValue<number>;\n  animateToPoint: (point: number, velocity: number) => void;\n}\n\ntype InteractivePanGestureHandlerContextType = {\n  currentPosition: number;\n  keyboardState: KEYBOARD_STATE;\n};\n\nexport const useInteractivePanGestureHandler = ({\n  type,\n  enableOverDrag,\n  overDragResistanceFactor,\n  keyboardState,\n  keyboardBehavior,\n  keyboardHeight,\n  isExtendedByKeyboard,\n  animatedPosition,\n  animatedSnapPoints,\n  scrollableContentOffsetY,\n  animateToPoint,\n}: useInteractivePanGestureHandlerConfigs): [\n  (event: PanGestureHandlerGestureEvent) => void,\n  Animated.SharedValue<State>,\n  Animated.SharedValue<number>,\n  Animated.SharedValue<number>\n] => {\n  const gestureState = useSharedValue<State>(State.UNDETERMINED);\n  const gestureTranslationY = useSharedValue(0);\n  const gestureVelocityY = useSharedValue(0);\n\n  const gestureHandler = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    InteractivePanGestureHandlerContextType\n  >({\n    onStart: ({ state, translationY, velocityY }, context) => {\n      // cancel current animation\n      cancelAnimation(animatedPosition);\n\n      // store current animated position\n      context.currentPosition = animatedPosition.value;\n      context.keyboardState = keyboardState.value;\n\n      if (\n        keyboardState.value === KEYBOARD_STATE.SHOWN &&\n        (keyboardBehavior === KEYBOARD_BEHAVIOR.interactive ||\n          keyboardBehavior === KEYBOARD_BEHAVIOR.fullScreen)\n      ) {\n        isExtendedByKeyboard.value = true;\n      }\n\n      // set variables\n      gestureState.value = state;\n      gestureTranslationY.value = translationY;\n      gestureVelocityY.value = velocityY;\n    },\n    onActive: ({ state, translationY, velocityY, absoluteY }, context) => {\n      gestureState.value = state;\n      gestureTranslationY.value = translationY;\n      gestureVelocityY.value = velocityY;\n\n      const position = context.currentPosition + translationY;\n      const maxSnapPoint = isExtendedByKeyboard.value\n        ? context.currentPosition\n        : animatedSnapPoints.value[animatedSnapPoints.value.length - 1];\n\n      const negativeScrollableContentOffset =\n        context.currentPosition === maxSnapPoint && scrollableContentOffsetY\n          ? scrollableContentOffsetY.value * -1\n          : 0;\n      const clampedPosition = clamp(\n        position + negativeScrollableContentOffset,\n        maxSnapPoint,\n        animatedSnapPoints.value[0]\n      );\n\n      /**\n       * dismiss the keyboard when panning down\n       */\n      if (translationY > KEYBOARD_DISMISS_THRESHOLD) {\n        if (\n          keyboardState.value === KEYBOARD_STATE.SHOWN &&\n          (Platform.OS === 'android' ||\n            keyboardBehavior !== KEYBOARD_BEHAVIOR.interactive ||\n            (keyboardBehavior === KEYBOARD_BEHAVIOR.interactive &&\n              absoluteY < WINDOW_HEIGHT - keyboardHeight.value))\n        ) {\n          runOnJS(Keyboard.dismiss)();\n        }\n      }\n\n      if (enableOverDrag) {\n        if (type === GESTURE.HANDLE && position <= maxSnapPoint) {\n          const resistedPosition =\n            maxSnapPoint -\n            Math.sqrt(1 + (maxSnapPoint - position)) * overDragResistanceFactor;\n          animatedPosition.value = resistedPosition;\n          return;\n        }\n\n        if (type === GESTURE.HANDLE && position > animatedSnapPoints.value[0]) {\n          const resistedPosition =\n            animatedSnapPoints.value[0] +\n            Math.sqrt(1 + (position - animatedSnapPoints.value[0])) *\n              overDragResistanceFactor;\n          animatedPosition.value = resistedPosition;\n          return;\n        }\n\n        if (\n          type === GESTURE.CONTENT &&\n          position + negativeScrollableContentOffset >\n            animatedSnapPoints.value[0]\n        ) {\n          const resistedPosition =\n            animatedSnapPoints.value[0] +\n            Math.sqrt(\n              1 +\n                (position +\n                  negativeScrollableContentOffset -\n                  animatedSnapPoints.value[0])\n            ) *\n              overDragResistanceFactor;\n          animatedPosition.value = resistedPosition;\n          return;\n        }\n      }\n\n      animatedPosition.value = clampedPosition;\n    },\n    onEnd: ({ state }, context) => {\n      gestureState.value = state;\n\n      if (\n        isExtendedByKeyboard.value &&\n        context.currentPosition >= animatedPosition.value\n      ) {\n        if (context.currentPosition > animatedPosition.value) {\n          animateToPoint(context.currentPosition, gestureVelocityY.value / 2);\n        }\n        return;\n      }\n\n      if (isExtendedByKeyboard.value) {\n        isExtendedByKeyboard.value = false;\n      }\n\n      const destinationPoint = snapPoint(\n        gestureTranslationY.value + context.currentPosition,\n        gestureVelocityY.value,\n        animatedSnapPoints.value\n      );\n\n      /**\n       * if destination point is the same as the current position,\n       * then no need to perform animation.\n       */\n      if (destinationPoint === animatedPosition.value) {\n        return;\n      }\n\n      if (\n        (scrollableContentOffsetY ? scrollableContentOffsetY.value : 0) > 0 &&\n        context.currentPosition ===\n          animatedSnapPoints.value[animatedSnapPoints.value.length - 1] &&\n        animatedPosition.value ===\n          animatedSnapPoints.value[animatedSnapPoints.value.length - 1]\n      ) {\n        return;\n      }\n\n      animateToPoint(destinationPoint, gestureVelocityY.value / 2);\n    },\n    onCancel: ({ state }) => {\n      gestureState.value = state;\n    },\n    onFail: ({ state }) => {\n      gestureState.value = state;\n    },\n    onFinish: ({ state }) => {\n      gestureState.value = state;\n    },\n  });\n\n  return [gestureHandler, gestureState, gestureTranslationY, gestureVelocityY];\n};\n"]}