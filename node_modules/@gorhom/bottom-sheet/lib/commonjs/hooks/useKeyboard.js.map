{"version":3,"sources":["useKeyboard.ts"],"names":["KEYBOARD_EVENT_MAPPER","KEYBOARD_SHOW","Platform","select","ios","android","default","KEYBOARD_HIDE","useKeyboard","shouldHandleKeyboardEvents","keyboardState","KEYBOARD_STATE","UNDETERMINED","keyboardHeight","keyboardAnimationEasing","keyboardAnimationDuration","handleKeyboardEvent","state","height","duration","easing","SHOWN","value","handleOnKeyboardShow","event","endCoordinates","handleOnKeyboardHide","HIDDEN","Keyboard","addListener","removeListener","animationEasing","animationDuration"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AAKA;;AAEA,MAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,aAAa,EAAEC,sBAASC,MAAT,CAAgB;AAC7BC,IAAAA,GAAG,EAAE,kBADwB;AAE7BC,IAAAA,OAAO,EAAE,iBAFoB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAAhB,CADa;AAM5BC,EAAAA,aAAa,EAAEL,sBAASC,MAAT,CAAgB;AAC7BC,IAAAA,GAAG,EAAE,kBADwB;AAE7BC,IAAAA,OAAO,EAAE,iBAFoB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAAhB;AANa,CAA9B;;AAaO,MAAME,WAAW,GAAG,MAAM;AAC/B;AACA,QAAMC,0BAA0B,GAAG,2CAAe,KAAf,CAAnC;AACA,QAAMC,aAAa,GAAG,2CACpBC,0BAAeC,YADK,CAAtB;AAGA,QAAMC,cAAc,GAAG,2CAAe,CAAf,CAAvB;AACA,QAAMC,uBAAuB,GAAG,2CAC9B,UAD8B,CAAhC;AAGA,QAAMC,yBAAyB,GAAG,2CAAe,GAAf,CAAlC,CAV+B,CAW/B;AAEA;;AACA,QAAMC,mBAAmB,GAAG,+CAC1B,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,KAAqC;AACnC,QAAIH,KAAK,KAAKN,0BAAeU,KAAzB,IAAkC,CAACZ,0BAA0B,CAACa,KAAlE,EAAyE;AACvE;AACD;;AACDZ,IAAAA,aAAa,CAACY,KAAd,GAAsBL,KAAtB;AACAJ,IAAAA,cAAc,CAACS,KAAf,GACEL,KAAK,KAAKN,0BAAeU,KAAzB,GACIH,MADJ,GAEIA,MAAM,KAAK,CAAX,GACAL,cAAc,CAACS,KADf,GAEAJ,MALN;AAMAH,IAAAA,yBAAyB,CAACO,KAA1B,GAAkCH,QAAlC;AACAL,IAAAA,uBAAuB,CAACQ,KAAxB,GAAgCF,MAAhC;AACD,GAdyB,EAe1B,EAf0B,CAA5B,CAd+B,CA+B/B;AAEA;;AACA,wBAAU,MAAM;AACd,UAAMG,oBAAoB,GAAIC,KAAD,IAA0B;AACrD,0CAAQR,mBAAR,EACEL,0BAAeU,KADjB,EAEEG,KAAK,CAACC,cAAN,CAAqBP,MAFvB,EAGEM,KAAK,CAACL,QAHR,EAIEK,KAAK,CAACJ,MAJR;AAMD,KAPD;;AAQA,UAAMM,oBAAoB,GAAIF,KAAD,IAA0B;AACrD,0CAAQR,mBAAR,EACEL,0BAAegB,MADjB,EAEEH,KAAK,CAACC,cAAN,CAAqBP,MAFvB,EAGEM,KAAK,CAACL,QAHR,EAIEK,KAAK,CAACJ,MAJR;AAMD,KAPD;;AASAQ,0BAASC,WAAT,CACE7B,qBAAqB,CAACC,aADxB,EAEEsB,oBAFF;;AAKAK,0BAASC,WAAT,CACE7B,qBAAqB,CAACO,aADxB,EAEEmB,oBAFF;;AAKA,WAAO,MAAM;AACXE,4BAASE,cAAT,CACE9B,qBAAqB,CAACC,aADxB,EAEEsB,oBAFF;;AAKAK,4BAASE,cAAT,CACE9B,qBAAqB,CAACO,aADxB,EAEEmB,oBAFF;AAID,KAVD;AAWD,GAvCD,EAuCG,CAACV,mBAAD,CAvCH,EAlC+B,CA0E/B;;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAEP,aADF;AAELQ,IAAAA,MAAM,EAAEL,cAFH;AAGLkB,IAAAA,eAAe,EAAEjB,uBAHZ;AAILkB,IAAAA,iBAAiB,EAAEjB,yBAJd;AAKLN,IAAAA;AALK,GAAP;AAOD,CAnFM","sourcesContent":["import { useEffect } from 'react';\nimport {\n  Keyboard,\n  KeyboardEvent,\n  KeyboardEventEasing,\n  KeyboardEventName,\n  Platform,\n} from 'react-native';\nimport {\n  runOnUI,\n  useSharedValue,\n  useWorkletCallback,\n} from 'react-native-reanimated';\nimport { KEYBOARD_STATE } from '../constants';\n\nconst KEYBOARD_EVENT_MAPPER = {\n  KEYBOARD_SHOW: Platform.select({\n    ios: 'keyboardWillShow',\n    android: 'keyboardDidShow',\n    default: '',\n  }) as KeyboardEventName,\n  KEYBOARD_HIDE: Platform.select({\n    ios: 'keyboardWillHide',\n    android: 'keyboardDidHide',\n    default: '',\n  }) as KeyboardEventName,\n};\n\nexport const useKeyboard = () => {\n  //#region variables\n  const shouldHandleKeyboardEvents = useSharedValue(false);\n  const keyboardState = useSharedValue<KEYBOARD_STATE>(\n    KEYBOARD_STATE.UNDETERMINED\n  );\n  const keyboardHeight = useSharedValue(0);\n  const keyboardAnimationEasing = useSharedValue<KeyboardEventEasing>(\n    'keyboard'\n  );\n  const keyboardAnimationDuration = useSharedValue(500);\n  //#endregion\n\n  //#region worklets\n  const handleKeyboardEvent = useWorkletCallback(\n    (state, height, duration, easing) => {\n      if (state === KEYBOARD_STATE.SHOWN && !shouldHandleKeyboardEvents.value) {\n        return;\n      }\n      keyboardState.value = state;\n      keyboardHeight.value =\n        state === KEYBOARD_STATE.SHOWN\n          ? height\n          : height === 0\n          ? keyboardHeight.value\n          : height;\n      keyboardAnimationDuration.value = duration;\n      keyboardAnimationEasing.value = easing;\n    },\n    []\n  );\n  //#endregion\n\n  //#region effects\n  useEffect(() => {\n    const handleOnKeyboardShow = (event: KeyboardEvent) => {\n      runOnUI(handleKeyboardEvent)(\n        KEYBOARD_STATE.SHOWN,\n        event.endCoordinates.height,\n        event.duration,\n        event.easing\n      );\n    };\n    const handleOnKeyboardHide = (event: KeyboardEvent) => {\n      runOnUI(handleKeyboardEvent)(\n        KEYBOARD_STATE.HIDDEN,\n        event.endCoordinates.height,\n        event.duration,\n        event.easing\n      );\n    };\n\n    Keyboard.addListener(\n      KEYBOARD_EVENT_MAPPER.KEYBOARD_SHOW,\n      handleOnKeyboardShow\n    );\n\n    Keyboard.addListener(\n      KEYBOARD_EVENT_MAPPER.KEYBOARD_HIDE,\n      handleOnKeyboardHide\n    );\n\n    return () => {\n      Keyboard.removeListener(\n        KEYBOARD_EVENT_MAPPER.KEYBOARD_SHOW,\n        handleOnKeyboardShow\n      );\n\n      Keyboard.removeListener(\n        KEYBOARD_EVENT_MAPPER.KEYBOARD_HIDE,\n        handleOnKeyboardHide\n      );\n    };\n  }, [handleKeyboardEvent]);\n  //#endregion\n\n  return {\n    state: keyboardState,\n    height: keyboardHeight,\n    animationEasing: keyboardAnimationEasing,\n    animationDuration: keyboardAnimationDuration,\n    shouldHandleKeyboardEvents,\n  };\n};\n"]}