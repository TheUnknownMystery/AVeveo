{"version":3,"sources":["useScrollable.ts"],"names":["useScrollable","scrollableRef","previousScrollableRef","scrollableState","SCROLLABLE_STATE","LOCKED","scrollableContentOffsetY","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef","flashScrollableIndicators","type","undefined","node","didResize","flashScrollIndicators","Platform","OS","setNativeProps","bottom"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGO,MAAMA,aAAa,GAAG,MAAM;AACjC;AACA,QAAMC,aAAa,GAAG,mBAAsB,IAAtB,CAAtB;AACA,QAAMC,qBAAqB,GAAG,mBAAsB,IAAtB,CAA9B,CAHiC,CAKjC;;AACA,QAAMC,eAAe,GAAG,2CACtBC,4BAAiBC,MADK,CAAxB;AAGA,QAAMC,wBAAwB,GAAG,2CAAuB,CAAvB,CAAjC,CATiC,CAWjC;;AACA,QAAMC,gBAAgB,GAAG,wBAAaC,GAAD,IAAwB;AAAA;;AAC3D;AACA,QAAIC,YAAY,sDAAGR,aAAa,CAACS,OAAjB,2DAAG,uBAAuBC,EAA1B,yEAAgC,IAAhD;;AAEA,QAAIF,YAAY,KAAKD,GAAG,CAACG,EAAzB,EAA6B;AAC3B,UAAIV,aAAa,CAACS,OAAlB,EAA2B;AACzB;AACAR,QAAAA,qBAAqB,CAACQ,OAAtB,GAAgCT,aAAa,CAACS,OAA9C;AACD,OAJ0B,CAK3B;;;AACAT,MAAAA,aAAa,CAACS,OAAd,GAAwBF,GAAxB;AACD;AACF,GAZwB,EAYtB,EAZsB,CAAzB;AAcA,QAAMI,mBAAmB,GAAG,wBAAaJ,GAAD,IAAgC;AAAA;;AACtE;AACA,QAAIG,EAAJ;;AACA,QAAI;AACFA,MAAAA,EAAE,GAAG,iCAAeH,GAAG,CAACE,OAAnB,CAAL;AACD,KAFD,CAEE,MAAM;AACN;AACD,KAPqE,CAStE;;;AACA,QAAID,YAAY,uDAAGR,aAAa,CAACS,OAAjB,2DAAG,uBAAuBC,EAA1B,2EAAgC,IAAhD;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAIA,EAAE,KAAKF,YAAX,EAAyB;AACvB;AACAR,MAAAA,aAAa,CAACS,OAAd,GAAwBR,qBAAqB,CAACQ,OAA9C;AACD;AACF,GArB2B,EAqBzB,EArByB,CAA5B;AAuBA,QAAMG,yBAAyB,GAAG,wBAAY,MAAM;AAAA;;AAClD,QAAIC,IAAI,uDAAGb,aAAa,CAACS,OAAjB,2DAAG,uBAAuBI,IAA1B,2EAAkCC,SAA1C;AACA,QAAIC,IAAI,uDAAGf,aAAa,CAACS,OAAjB,2DAAG,uBAAuBM,IAA1B,2EAAkCD,SAA1C;AACA,QAAIE,SAAS,wDAAGhB,aAAa,CAACS,OAAjB,4DAAG,wBAAuBO,SAA1B,2EAAuC,KAApD;;AAEA,QAAI,CAACH,IAAD,IAAS,CAACE,IAAd,EAAoB;AAClB;AACD,KAPiD,CASlD;;;AACA,QAAIA,IAAI,CAACN,OAAL,CAAaQ,qBAAjB,EAAwC;AACtC;AACAF,MAAAA,IAAI,CAACN,OAAL,CAAaQ,qBAAb;AAEA;AACN;AACA;AACA;;AACM,UAAIC,sBAASC,EAAT,KAAgB,KAAhB,IAAyB,CAACH,SAA9B,EAAyC;AACvC;AACAD,QAAAA,IAAI,CAACN,OAAL,CAAaW,cAAb,CAA4B;AAC1BC,UAAAA,MAAM,EAAE;AADkB,SAA5B,EAFuC,CAMvC;;AACArB,QAAAA,aAAa,CAACS,OAAd,CAAsBO,SAAtB,GAAkC,IAAlC;AACD;AACF;AACF,GA5BiC,EA4B/B,EA5B+B,CAAlC;AA8BA,SAAO;AACLhB,IAAAA,aADK;AAELE,IAAAA,eAFK;AAGLG,IAAAA,wBAHK;AAILC,IAAAA,gBAJK;AAKLK,IAAAA,mBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAvFM","sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { findNodeHandle, Platform } from 'react-native';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { SCROLLABLE_STATE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const scrollableState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.LOCKED\n  );\n  const scrollableContentOffsetY = useSharedValue<number>(0);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = findNodeHandle(ref.current);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  const flashScrollableIndicators = useCallback(() => {\n    let type = scrollableRef.current?.type ?? undefined;\n    let node = scrollableRef.current?.node ?? undefined;\n    let didResize = scrollableRef.current?.didResize ?? false;\n\n    if (!type || !node) {\n      return;\n    }\n\n    // @ts-ignore\n    if (node.current.flashScrollIndicators) {\n      // @ts-ignore\n      node.current.flashScrollIndicators();\n\n      /**\n       * this is a hack to resize the scroll indicator\n       * size on iOS.\n       */\n      if (Platform.OS === 'ios' && !didResize) {\n        // @ts-ignore\n        node.current.setNativeProps({\n          bottom: 0.5,\n        });\n\n        // @ts-ignore\n        scrollableRef.current.didResize = true;\n      }\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    scrollableState,\n    scrollableContentOffsetY,\n    setScrollableRef,\n    removeScrollableRef,\n    flashScrollableIndicators,\n  };\n};\n"]}