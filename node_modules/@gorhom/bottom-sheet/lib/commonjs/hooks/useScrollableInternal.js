"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollableInternal = void 0;

var _react = require("react");

var _reactNative = require("react-native");

var _reactNativeReanimated = require("react-native-reanimated");

var _useBottomSheetInternal = require("./useBottomSheetInternal");

var _constants = require("../constants");

const useScrollableInternal = type => {
  // refs
  const scrollableRef = (0, _reactNativeReanimated.useAnimatedRef)();
  const scrollableContentOffsetY = (0, _reactNativeReanimated.useSharedValue)(0);
  const justStartedScrolling = (0, _reactNativeReanimated.useSharedValue)(0);
  const initialScrollingPosition = (0, _reactNativeReanimated.useSharedValue)(0); // hooks

  const {
    scrollableState,
    animationState,
    scrollableContentOffsetY: _rootScrollableContentOffsetY,
    setScrollableRef,
    removeScrollableRef
  } = (0, _useBottomSheetInternal.useBottomSheetInternal)(); // variables

  const scrollableAnimatedProps = (0, _reactNativeReanimated.useAnimatedProps)(() => ({
    decelerationRate: _constants.SCROLLABLE_DECELERATION_RATE_MAPPER[scrollableState.value]
  })); // callbacks

  const handleScrollEvent = (0, _reactNativeReanimated.useAnimatedScrollHandler)({
    onBeginDrag: ({
      contentOffset: {
        y
      }
    }) => {
      if (scrollableState.value === _constants.SCROLLABLE_STATE.LOCKED) {
        initialScrollingPosition.value = y;
        justStartedScrolling.value = 1;
        scrollableContentOffsetY.value = 0;
        _rootScrollableContentOffsetY.value = 0;
        return;
      }

      scrollableContentOffsetY.value = y;
      _rootScrollableContentOffsetY.value = y;
    },
    onScroll: () => {
      if (_reactNative.Platform.OS === 'android' && justStartedScrolling.value === 1) {
        justStartedScrolling.value = 0; // @ts-ignore

        (0, _reactNativeReanimated.scrollTo)(scrollableRef, 0, initialScrollingPosition.value, false);
        return;
      }

      if (scrollableState.value === _constants.SCROLLABLE_STATE.LOCKED) {
        // @ts-ignore
        (0, _reactNativeReanimated.scrollTo)(scrollableRef, 0, 0, false);
        scrollableContentOffsetY.value = 0;
        return;
      }
    },
    onEndDrag: ({
      contentOffset: {
        y
      }
    }) => {
      if (scrollableState.value === _constants.SCROLLABLE_STATE.LOCKED) {
        // @ts-ignore
        (0, _reactNativeReanimated.scrollTo)(scrollableRef, 0, 0, false);
        scrollableContentOffsetY.value = 0;
        return;
      }

      if (animationState.value !== _constants.ANIMATION_STATE.RUNNING) {
        scrollableContentOffsetY.value = y;
        _rootScrollableContentOffsetY.value = y;
      }
    },
    onMomentumEnd: ({
      contentOffset: {
        y
      }
    }) => {
      if (scrollableState.value === _constants.SCROLLABLE_STATE.LOCKED) {
        // @ts-ignore
        (0, _reactNativeReanimated.scrollTo)(scrollableRef, 0, 0, false);
        scrollableContentOffsetY.value = 0;
        return;
      }

      if (animationState.value !== _constants.ANIMATION_STATE.RUNNING) {
        scrollableContentOffsetY.value = y;
        _rootScrollableContentOffsetY.value = y;
      }
    }
  });
  const handleSettingScrollable = (0, _react.useCallback)(() => {
    // set current content offset
    (0, _reactNativeReanimated.runOnUI)(() => {
      _rootScrollableContentOffsetY.value = scrollableContentOffsetY.value;
    })(); // set current scrollable ref

    const id = (0, _reactNative.findNodeHandle)(scrollableRef.current);

    if (id) {
      setScrollableRef({
        id: id,
        type,
        node: scrollableRef,
        didResize: false
      });
    } else {
      console.warn(`Couldn't find the scrollable node handle id!`);
    }

    return () => {
      removeScrollableRef(scrollableRef);
    };
  }, [_rootScrollableContentOffsetY, removeScrollableRef, scrollableContentOffsetY, scrollableRef, setScrollableRef, type]);
  return {
    scrollableRef,
    scrollableAnimatedProps,
    handleScrollEvent,
    handleSettingScrollable
  };
};

exports.useScrollableInternal = useScrollableInternal;
//# sourceMappingURL=useScrollableInternal.js.map