{"version":3,"sources":["normalizeSnapPoints.ts"],"names":["normalizeSnapPoints","snapPoints","containerHeight","topInset","map","snapPoint","Number","split"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACO,MAAMA,mBAAmB,GAAG,CACjCC,UADiC,EAEjCC,eAFiC,EAGjCC,QAHiC,KAKjCF,UAAU,CAACG,GAAX,CAAeC,SAAS,IAAI;AAC1B,4CAAkBA,SAAlB;AACA,SAAO,OAAOA,SAAP,KAAqB,QAArB,GACHA,SADG,GAEFC,MAAM,CAACD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAAN,IAAmCL,eAAe,GAAGC,QAArD,CAAD,GAAmE,GAFvE;AAGD,CALD,CALK","sourcesContent":["import { validateSnapPoint } from './validateSnapPoint';\n\n/**\n * Converts snap points with percentage to fixed numbers.\n */\nexport const normalizeSnapPoints = (\n  snapPoints: Array<number | string>,\n  containerHeight: number,\n  topInset: number\n) =>\n  snapPoints.map(snapPoint => {\n    validateSnapPoint(snapPoint);\n    return typeof snapPoint === 'number'\n      ? snapPoint\n      : (Number(snapPoint.split('%')[0]) * (containerHeight - topInset)) / 100;\n  });\n"]}