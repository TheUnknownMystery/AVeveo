import React, { memo, useCallback, useMemo, useRef } from 'react';
import Animated, { interpolate, Extrapolate, useAnimatedStyle, useAnimatedReaction, useAnimatedGestureHandler, runOnJS } from 'react-native-reanimated';
import { TapGestureHandler } from 'react-native-gesture-handler';
import { DEFAULT_OPACITY, DEFAULT_APPEARS_ON_INDEX, DEFAULT_DISAPPEARS_ON_INDEX, DEFAULT_ENABLE_TOUCH_THROUGH } from './constants';
import { usePressBehavior } from './usePressBehavior';
import { styles } from './styles';

const BottomSheetBackdropComponent = ({
  animatedIndex,
  opacity = DEFAULT_OPACITY,
  appearsOnIndex = DEFAULT_APPEARS_ON_INDEX,
  disappearsOnIndex = DEFAULT_DISAPPEARS_ON_INDEX,
  enableTouchThrough = DEFAULT_ENABLE_TOUCH_THROUGH,
  pressBehavior,
  closeOnPress,
  style
}) => {
  //#region hooks
  const {
    handleOnPress,
    syntheticPressBehavior
  } = usePressBehavior({
    pressBehavior,
    closeOnPress,
    disappearsOnIndex
  }); //#endregion
  //#region variables

  const containerRef = useRef(null);
  const pointerEvents = useMemo(() => enableTouchThrough ? 'none' : 'auto', [enableTouchThrough]); //#endregion
  //#region callbacks

  const handleContainerTouchability = useCallback(shouldDisableTouchability => {
    if (!containerRef.current) {
      return;
    } // @ts-ignore


    containerRef.current.setNativeProps({
      pointerEvents: shouldDisableTouchability ? 'none' : 'auto'
    });
  }, []); //#endregion
  //#region tap gesture

  const gestureHandler = useAnimatedGestureHandler({
    onFinish: () => {
      runOnJS(handleOnPress)();
    }
  }, [handleOnPress]); //#endregion
  //#region styles

  const containerAnimatedStyle = useAnimatedStyle(() => ({
    opacity: interpolate(animatedIndex.value, [-1, disappearsOnIndex, appearsOnIndex], [0, 0, opacity], Extrapolate.CLAMP),
    flex: 1
  }));
  const containerStyle = useMemo(() => [styles.container, style, containerAnimatedStyle], [style, containerAnimatedStyle]); //#endregion
  //#region effects

  useAnimatedReaction(() => animatedIndex.value <= disappearsOnIndex, (shouldDisableTouchability, previous) => {
    if (shouldDisableTouchability === previous) {
      return;
    }

    runOnJS(handleContainerTouchability)(shouldDisableTouchability);
  }, [disappearsOnIndex]); //#endregion

  return syntheticPressBehavior !== 'none' ? /*#__PURE__*/React.createElement(TapGestureHandler, {
    onGestureEvent: gestureHandler
  }, /*#__PURE__*/React.createElement(Animated.View, {
    ref: containerRef,
    style: containerStyle,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: "Bottom Sheet backdrop",
    accessibilityHint: `Tap to ${typeof syntheticPressBehavior === 'string' ? syntheticPressBehavior : 'move'} the Bottom Sheet`
  })) : /*#__PURE__*/React.createElement(Animated.View, {
    ref: containerRef,
    pointerEvents: pointerEvents,
    style: containerStyle
  });
};

const BottomSheetBackdrop = /*#__PURE__*/memo(BottomSheetBackdropComponent);
BottomSheetBackdrop.displayName = 'BottomSheetBackdrop';
export default BottomSheetBackdrop;
//# sourceMappingURL=BottomSheetBackdrop.js.map