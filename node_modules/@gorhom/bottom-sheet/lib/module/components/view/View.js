function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { memo, useMemo, useEffect, useCallback } from 'react';
import { View as RNView } from 'react-native';
import { useBottomSheetInternal } from '../../hooks';
import { styles } from './styles';
import { runOnUI } from 'react-native-reanimated';

const BottomSheetViewComponent = ({
  style,
  focusHook: useFocusHook = useEffect,
  children,
  ...reset
}) => {
  // hooks
  const {
    scrollableContentOffsetY
  } = useBottomSheetInternal(); // styles

  const containerStyle = useMemo(() => ({ ...styles.container,
    // @ts-ignore
    ...style
  }), [style]); // callback

  const handleSettingScrollable = useCallback(() => {
    runOnUI(() => {
      scrollableContentOffsetY.value = 0;
    })();
  }, [scrollableContentOffsetY]); // effects

  useFocusHook(handleSettingScrollable); //render

  return /*#__PURE__*/React.createElement(RNView, _extends({
    style: containerStyle
  }, reset), children);
};

const BottomSheetView = /*#__PURE__*/memo(BottomSheetViewComponent);
BottomSheetView.displayName = 'BottomSheetView';
export default BottomSheetView;
//# sourceMappingURL=View.js.map