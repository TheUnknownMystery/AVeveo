{"version":3,"sources":["internal.ts"],"names":["createContext","BottomSheetInternalContext","BottomSheetInternalProvider","Provider"],"mappings":"AAAA,SAASA,aAAT,QAAyC,OAAzC;AAkCA;AACA,OAAO,MAAMC,0BAA0B,gBAAGD,aAAa,EAAhD;AAEP,OAAO,MAAME,2BAA2B,GAAGD,0BAA0B,CAACE,QAA/D","sourcesContent":["import { createContext, RefObject } from 'react';\nimport type { PanGestureHandlerProps } from 'react-native-gesture-handler';\nimport type Animated from 'react-native-reanimated';\nimport type {\n  ANIMATION_STATE,\n  SCROLLABLE_STATE,\n  SHEET_STATE,\n} from '../constants';\nimport type { Scrollable, ScrollableRef } from '../types';\n\nexport interface BottomSheetInternalContextType\n  extends Pick<\n    PanGestureHandlerProps,\n    | 'activeOffsetY'\n    | 'activeOffsetX'\n    | 'failOffsetY'\n    | 'failOffsetX'\n    | 'waitFor'\n    | 'simultaneousHandlers'\n  > {\n  enableContentPanningGesture: boolean;\n  snapPointsCount: number;\n  animatedPosition: Animated.SharedValue<number>;\n  animatedIndex: Animated.SharedValue<number>;\n  animationState: Animated.SharedValue<ANIMATION_STATE>;\n  animatedSheetState: Animated.SharedValue<SHEET_STATE>;\n  contentPanGestureHandler: any;\n  scrollableState: Animated.SharedValue<SCROLLABLE_STATE>;\n  scrollableContentOffsetY: Animated.SharedValue<number>;\n  shouldHandleKeyboardEvents: Animated.SharedValue<boolean>;\n  setScrollableRef: (ref: ScrollableRef) => void;\n  removeScrollableRef: (ref: RefObject<Scrollable>) => void;\n}\n\n// @ts-ignore\nexport const BottomSheetInternalContext = createContext<BottomSheetInternalContextType>();\n\nexport const BottomSheetInternalProvider = BottomSheetInternalContext.Provider;\n"]}