{"version":3,"sources":["useScrollable.ts"],"names":["useCallback","useRef","findNodeHandle","Platform","useSharedValue","SCROLLABLE_STATE","useScrollable","scrollableRef","previousScrollableRef","scrollableState","LOCKED","scrollableContentOffsetY","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef","flashScrollableIndicators","type","undefined","node","didResize","flashScrollIndicators","OS","setNativeProps","bottom"],"mappings":"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","sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { findNodeHandle, Platform } from 'react-native';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { SCROLLABLE_STATE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const scrollableState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.LOCKED\n  );\n  const scrollableContentOffsetY = useSharedValue<number>(0);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = findNodeHandle(ref.current);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  const flashScrollableIndicators = useCallback(() => {\n    let type = scrollableRef.current?.type ?? undefined;\n    let node = scrollableRef.current?.node ?? undefined;\n    let didResize = scrollableRef.current?.didResize ?? false;\n\n    if (!type || !node) {\n      return;\n    }\n\n    // @ts-ignore\n    if (node.current.flashScrollIndicators) {\n      // @ts-ignore\n      node.current.flashScrollIndicators();\n\n      /**\n       * this is a hack to resize the scroll indicator\n       * size on iOS.\n       */\n      if (Platform.OS === 'ios' && !didResize) {\n        // @ts-ignore\n        node.current.setNativeProps({\n          bottom: 0.5,\n        });\n\n        // @ts-ignore\n        scrollableRef.current.didResize = true;\n      }\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    scrollableState,\n    scrollableContentOffsetY,\n    setScrollableRef,\n    removeScrollableRef,\n    flashScrollableIndicators,\n  };\n};\n"]}