{"version":3,"sources":["animate.ts"],"names":["withSpring","withTiming","ANIMATION_METHOD","animate","point","configs","velocity","onComplete","type","TIMING","SPRING"],"mappings":"AAAA,SAAmBA,UAAnB,EAA+BC,UAA/B,QAAiD,yBAAjD;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,OAAO,GAAG,CACrBC,KADqB,EAErBC,OAFqB,EAGrBC,QAHqB,EAIrBC,UAJqB,KAKlB;AACH,YADG,CAGH;;AACA,QAAMC,IAAI,GACR,cAAcH,OAAd,IAAyB,YAAYA,OAArC,GACIH,gBAAgB,CAACO,MADrB,GAEIP,gBAAgB,CAACQ,MAHvB;;AAKA,MAAIF,IAAI,KAAKN,gBAAgB,CAACO,MAA9B,EAAsC;AACpC,WAAOR,UAAU,CAACG,KAAD,EAAQC,OAAR,EAA8CE,UAA9C,CAAjB;AACD,GAFD,MAEO;AACL;AACAF,IAAAA,OAAO,CAACC,QAAR,GAAmBA,QAAnB;AACA,WAAON,UAAU,CAACI,KAAD,EAAQC,OAAR,EAA8CE,UAA9C,CAAjB;AACD;AACF,CArBM","sourcesContent":["import Animated, { withSpring, withTiming } from 'react-native-reanimated';\nimport { ANIMATION_METHOD } from '../constants';\n\nexport const animate = (\n  point: number,\n  configs: Animated.WithSpringConfig | Animated.WithTimingConfig,\n  velocity: number,\n  onComplete: () => void\n) => {\n  'worklet';\n\n  // detect animation type\n  const type =\n    'duration' in configs || 'easing' in configs\n      ? ANIMATION_METHOD.TIMING\n      : ANIMATION_METHOD.SPRING;\n\n  if (type === ANIMATION_METHOD.TIMING) {\n    return withTiming(point, configs as Animated.WithTimingConfig, onComplete);\n  } else {\n    // @ts-ignore\n    configs.velocity = velocity;\n    return withSpring(point, configs as Animated.WithSpringConfig, onComplete);\n  }\n};\n"]}