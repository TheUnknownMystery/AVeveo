{"version":3,"sources":["Matrix3.ts"],"names":["exhaustiveCheck","a","Error","identityMatrix","translateXMatrix","x","translateYMatrix","y","scaleMatrix","s","scaleXMatrix","scaleYMatrix","skewXMatrix","Math","tan","skewYMatrix","rotateZMatrix","r","cos","sin","dot3","row","col","matrixVecMul3","m","v","multiply3","m1","m2","col0","col1","col2","serializeToSVGMatrix","processTransform2d","transforms","reduce","acc","transform","key","Object","keys","value","isMatrix3","arg","length","Array","decompose2d","b","c","d","translateX","translateY","E","F","G","H","Q","sqrt","pow","R","scaleX","scaleY","a1","atan2","a2","theta","phi","rotateZ","adjugate","basisToPoints","p1","p2","p3","p4","transform2d","params","canvas","projected","t"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport { Vector } from \"./Vectors\";\n\nexport type Vec3 = readonly [number, number, number];\n\nexport type Matrix3 = readonly [Vec3, Vec3, Vec3];\n\ntype Transform2dName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"skewX\"\n  | \"skewY\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\n\nexport interface TransformProp {\n  transform: Transforms2d;\n}\n\ntype Transformations = {\n  [Name in Transform2dName]: number;\n};\nexport type Transforms2d = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"skewX\">\n  | Pick<Transformations, \"skewY\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, x],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst translateYMatrix = (y: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [0, 1, y],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [s, 0, 0],\n    [0, s, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleXMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [s, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleYMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [0, s, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst skewXMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, Math.tan(s), 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst skewYMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [Math.tan(s), 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst rotateZMatrix = (r: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [Math.cos(r), -1 * Math.sin(r), 0],\n    [Math.sin(r), Math.cos(r), 0],\n    [0, 0, 1],\n  ];\n};\n\nexport const dot3 = (row: Vec3, col: Vec3) => {\n  \"worklet\";\n  return row[0] * col[0] + row[1] * col[1] + row[2] * col[2];\n};\n\nexport const matrixVecMul3 = (m: Matrix3, v: Vec3) => {\n  \"worklet\";\n  return [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)] as const;\n};\n\nexport const multiply3 = (m1: Matrix3, m2: Matrix3) => {\n  \"worklet\";\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)],\n    [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)],\n    [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)],\n  ] as const;\n};\n\nexport const serializeToSVGMatrix = (m: Matrix3) => {\n  \"worklet\";\n  return `matrix(${m[0][0]}, ${m[1][0]}, ${m[0][1]}, ${m[1][1]}, ${m[0][2]}, ${m[1][2]})`;\n};\n\nexport const processTransform2d = (transforms: Transforms2d) => {\n  \"worklet\";\n  return transforms.reduce((acc, transform) => {\n    const key = Object.keys(transform)[0] as Transform2dName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n};\n\nconst isMatrix3 = (arg: Matrix3 | Transforms2d): arg is Matrix3 => {\n  \"worklet\";\n  return arg.length === 3 && arg[0] instanceof Array;\n};\n\n// https://math.stackexchange.com/questions/13150/extracting-rotation-scale-values-from-2d-transformation-matrix\nexport const decompose2d = (arg: Matrix3 | Transforms2d) => {\n  \"worklet\";\n  const m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  const a = m[0][0];\n  const b = m[1][0];\n  const c = m[0][1];\n  const d = m[1][1];\n  const translateX = m[0][2];\n  const translateY = m[1][2];\n  const E = (a + d) / 2;\n  const F = (a - d) / 2;\n  const G = (c + b) / 2;\n  const H = (c - b) / 2;\n  const Q = Math.sqrt(Math.pow(E, 2) + Math.pow(H, 2));\n  const R = Math.sqrt(Math.pow(F, 2) + Math.pow(G, 2));\n  const scaleX = Q + R;\n  const scaleY = Q - R;\n  const a1 = Math.atan2(G, F);\n  const a2 = Math.atan2(H, E);\n  const theta = (a2 - a1) / 2;\n  const phi = (a2 + a1) / 2;\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: -1 * theta },\n    { scaleX },\n    { scaleY },\n    { rotateZ: -1 * phi },\n  ] as const;\n};\n\nconst adjugate = (m: Matrix3) => {\n  \"worklet\";\n  return [\n    [\n      m[1][1] * m[2][2] - m[1][2] * [2][1],\n      m[0][2] * [2][1] - m[0][1] * [2][2],\n      m[0][1] * [1][2] - m[0][2] * [1][1],\n    ],\n    [\n      m[1][2] * [2][0] - m[1][0] * [2][2],\n      m[0][0] * [2][2] - m[0][2] * [2][0],\n      m[0][2] * [1][0] - m[0][0] * [1][2],\n    ],\n    [\n      m[1][0] * [2][1] - m[1][1] * [2][0],\n      m[0][1] * [2][0] - m[0][0] * [2][1],\n      m[0][0] * [1][1] - m[0][1] * [1][0],\n    ],\n  ] as const;\n};\n\ninterface Quadrilateral {\n  p1: Vector;\n  p2: Vector;\n  p3: Vector;\n  p4: Vector;\n}\n\ninterface Parameters {\n  canvas: Quadrilateral;\n  projected: Quadrilateral;\n}\n\nconst basisToPoints = ({ p1, p2, p3, p4 }: Quadrilateral) => {\n  \"worklet\";\n  const m = [\n    [p1.x, p2.x, p3.x],\n    [p1.y, p2.y, p3.y],\n    [1, 1, 1],\n  ] as const;\n  const v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [\n    [v[0], 0, 0],\n    [0, v[1], 0],\n    [0, 0, v[2]],\n  ]);\n};\n\n// https://math.stackexchange.com/questions/296794/finding-the-transform-matrix-from-4-projected-points-with-javascript\n// https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n// http://jsfiddle.net/dFrHS/1/\nexport const transform2d = (params: Parameters) => {\n  \"worklet\";\n  const s = basisToPoints(params.canvas);\n  const d = basisToPoints(params.projected);\n  const t = multiply3(d, adjugate(s));\n  return [\n    [t[0][0] / t[2][2], t[0][1] / t[2][2], t[0][2] / t[2][2]],\n    [t[1][0] / t[2][2], t[1][1] / t[2][2], t[1][2] / t[2][2]],\n    [t[2][0] / t[2][2], t[2][1] / t[2][2], 1],\n  ] as const;\n};\n"]}